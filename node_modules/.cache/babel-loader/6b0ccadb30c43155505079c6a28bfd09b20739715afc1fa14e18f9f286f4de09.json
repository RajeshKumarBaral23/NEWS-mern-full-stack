{"ast":null,"code":"const express=require('express');const bcrypt=require('bcryptjs');const jwt=require('jsonwebtoken');const User=require('../models/user');// Assuming you have a User model\nconst router=express.Router();// Register route\nrouter.post('/signup',async(req,res)=>{try{const{name,email,password}=req.body;const hashedPassword=await bcrypt.hash(password,10);const user=new User({name,email,password:hashedPassword});await user.save();res.status(201).json({message:'User registered successfully'});}catch(error){console.error('Error registering user:',error);// Log the error\nres.status(500).json({message:'Error registering user',error:error.message});}});// Login route\nrouter.post('/signin',async(req,res)=>{try{const{email,password}=req.body;const user=await User.findOne({email}).select('+password');if(!user){return res.status(401).json({message:'Invalid credentials'});}const isMatch=await bcrypt.compare(password,user.password);if(!isMatch){return res.status(401).json({message:'Invalid credentials'});}const token=jwt.sign({userId:user._id},process.env.JWT_SECRET,{expiresIn:'1h'});res.json({token});}catch(error){console.error('Error logging in:',error);// Log the error\nres.status(500).json({message:'Error logging in',error:error.message});}});module.exports=router;","map":{"version":3,"names":["express","require","bcrypt","jwt","User","router","Router","post","req","res","name","email","password","body","hashedPassword","hash","user","save","status","json","message","error","console","findOne","select","isMatch","compare","token","sign","userId","_id","process","env","JWT_SECRET","expiresIn","module","exports"],"sources":["C:/FarmRipe/NEWS-mern-full-stack/src/Register.js"],"sourcesContent":["const express = require('express');\nconst bcrypt = require('bcryptjs');\nconst jwt = require('jsonwebtoken');\nconst User = require('../models/user'); // Assuming you have a User model\nconst router = express.Router();\n\n// Register route\nrouter.post('/signup', async (req, res) => {\n  try {\n    const { name, email, password } = req.body;\n    const hashedPassword = await bcrypt.hash(password, 10);\n    const user = new User({ name, email, password: hashedPassword });\n    await user.save();\n    res.status(201).json({ message: 'User registered successfully' });\n  } catch (error) {\n    console.error('Error registering user:', error); // Log the error\n    res.status(500).json({ message: 'Error registering user', error: error.message });\n  }\n});\n\n// Login route\nrouter.post('/signin', async (req, res) => {\n  try {\n    const { email, password } = req.body;\n    const user = await User.findOne({ email }).select('+password');\n    if (!user) {\n      return res.status(401).json({ message: 'Invalid credentials' });\n    }\n    const isMatch = await bcrypt.compare(password, user.password);\n    if (!isMatch) {\n      return res.status(401).json({ message: 'Invalid credentials' });\n    }\n    const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET, { expiresIn: '1h' });\n    res.json({ token });\n  } catch (error) {\n    console.error('Error logging in:', error); // Log the error\n    res.status(500).json({ message: 'Error logging in', error: error.message });\n  }\n});\n\nmodule.exports = router;"],"mappings":"AAAA,KAAM,CAAAA,OAAO,CAAGC,OAAO,CAAC,SAAS,CAAC,CAClC,KAAM,CAAAC,MAAM,CAAGD,OAAO,CAAC,UAAU,CAAC,CAClC,KAAM,CAAAE,GAAG,CAAGF,OAAO,CAAC,cAAc,CAAC,CACnC,KAAM,CAAAG,IAAI,CAAGH,OAAO,CAAC,gBAAgB,CAAC,CAAE;AACxC,KAAM,CAAAI,MAAM,CAAGL,OAAO,CAACM,MAAM,CAAC,CAAC,CAE/B;AACAD,MAAM,CAACE,IAAI,CAAC,SAAS,CAAE,MAAOC,GAAG,CAAEC,GAAG,GAAK,CACzC,GAAI,CACF,KAAM,CAAEC,IAAI,CAAEC,KAAK,CAAEC,QAAS,CAAC,CAAGJ,GAAG,CAACK,IAAI,CAC1C,KAAM,CAAAC,cAAc,CAAG,KAAM,CAAAZ,MAAM,CAACa,IAAI,CAACH,QAAQ,CAAE,EAAE,CAAC,CACtD,KAAM,CAAAI,IAAI,CAAG,GAAI,CAAAZ,IAAI,CAAC,CAAEM,IAAI,CAAEC,KAAK,CAAEC,QAAQ,CAAEE,cAAe,CAAC,CAAC,CAChE,KAAM,CAAAE,IAAI,CAACC,IAAI,CAAC,CAAC,CACjBR,GAAG,CAACS,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,CAAEC,OAAO,CAAE,8BAA+B,CAAC,CAAC,CACnE,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,CAAEA,KAAK,CAAC,CAAE;AACjDZ,GAAG,CAACS,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,CAAEC,OAAO,CAAE,wBAAwB,CAAEC,KAAK,CAAEA,KAAK,CAACD,OAAQ,CAAC,CAAC,CACnF,CACF,CAAC,CAAC,CAEF;AACAf,MAAM,CAACE,IAAI,CAAC,SAAS,CAAE,MAAOC,GAAG,CAAEC,GAAG,GAAK,CACzC,GAAI,CACF,KAAM,CAAEE,KAAK,CAAEC,QAAS,CAAC,CAAGJ,GAAG,CAACK,IAAI,CACpC,KAAM,CAAAG,IAAI,CAAG,KAAM,CAAAZ,IAAI,CAACmB,OAAO,CAAC,CAAEZ,KAAM,CAAC,CAAC,CAACa,MAAM,CAAC,WAAW,CAAC,CAC9D,GAAI,CAACR,IAAI,CAAE,CACT,MAAO,CAAAP,GAAG,CAACS,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,CAAEC,OAAO,CAAE,qBAAsB,CAAC,CAAC,CACjE,CACA,KAAM,CAAAK,OAAO,CAAG,KAAM,CAAAvB,MAAM,CAACwB,OAAO,CAACd,QAAQ,CAAEI,IAAI,CAACJ,QAAQ,CAAC,CAC7D,GAAI,CAACa,OAAO,CAAE,CACZ,MAAO,CAAAhB,GAAG,CAACS,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,CAAEC,OAAO,CAAE,qBAAsB,CAAC,CAAC,CACjE,CACA,KAAM,CAAAO,KAAK,CAAGxB,GAAG,CAACyB,IAAI,CAAC,CAAEC,MAAM,CAAEb,IAAI,CAACc,GAAI,CAAC,CAAEC,OAAO,CAACC,GAAG,CAACC,UAAU,CAAE,CAAEC,SAAS,CAAE,IAAK,CAAC,CAAC,CACzFzB,GAAG,CAACU,IAAI,CAAC,CAAEQ,KAAM,CAAC,CAAC,CACrB,CAAE,MAAON,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,mBAAmB,CAAEA,KAAK,CAAC,CAAE;AAC3CZ,GAAG,CAACS,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,CAAEC,OAAO,CAAE,kBAAkB,CAAEC,KAAK,CAAEA,KAAK,CAACD,OAAQ,CAAC,CAAC,CAC7E,CACF,CAAC,CAAC,CAEFe,MAAM,CAACC,OAAO,CAAG/B,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}