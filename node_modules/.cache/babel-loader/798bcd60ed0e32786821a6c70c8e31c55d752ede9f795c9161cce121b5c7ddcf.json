{"ast":null,"code":"const express = require('express');\nconst bcrypt = require('bcryptjs');\nconst jwt = require('jsonwebtoken');\nconst User = require('../models/user'); // Assuming you have a User model\nconst router = express.Router();\n\n// Register route\nrouter.post('/signup', async (req, res) => {\n  try {\n    const {\n      name,\n      email,\n      password\n    } = req.body;\n    const hashedPassword = await bcrypt.hash(password, 10);\n    const user = new User({\n      name,\n      email,\n      password: hashedPassword\n    });\n    await user.save();\n    res.status(201).json({\n      message: 'User registered successfully'\n    });\n  } catch (error) {\n    console.error('Error registering user:', error); // Log the error\n    res.status(500).json({\n      message: 'Error registering user',\n      error: error.message\n    });\n  }\n});\n\n// Login route\nrouter.post('/signin', async (req, res) => {\n  try {\n    const {\n      email,\n      password\n    } = req.body;\n    const user = await User.findOne({\n      email\n    }).select('+password');\n    if (!user) {\n      return res.status(401).json({\n        message: 'Invalid credentials'\n      });\n    }\n    const isMatch = await bcrypt.compare(password, user.password);\n    if (!isMatch) {\n      return res.status(401).json({\n        message: 'Invalid credentials'\n      });\n    }\n    const token = jwt.sign({\n      userId: user._id\n    }, process.env.JWT_SECRET, {\n      expiresIn: '1h'\n    });\n    res.json({\n      token\n    });\n  } catch (error) {\n    console.error('Error logging in:', error); // Log the error\n    res.status(500).json({\n      message: 'Error logging in',\n      error: error.message\n    });\n  }\n});\nmodule.exports = router;","map":{"version":3,"names":["express","require","bcrypt","jwt","User","router","Router","post","req","res","name","email","password","body","hashedPassword","hash","user","save","status","json","message","error","console","findOne","select","isMatch","compare","token","sign","userId","_id","process","env","JWT_SECRET","expiresIn","module","exports"],"sources":["C:/FarmRipe/NEWS-mern-full-stack/src/Register.js"],"sourcesContent":["const express = require('express');\nconst bcrypt = require('bcryptjs');\nconst jwt = require('jsonwebtoken');\nconst User = require('../models/user'); // Assuming you have a User model\nconst router = express.Router();\n\n// Register route\nrouter.post('/signup', async (req, res) => {\n  try {\n    const { name, email, password } = req.body;\n    const hashedPassword = await bcrypt.hash(password, 10);\n    const user = new User({ name, email, password: hashedPassword });\n    await user.save();\n    res.status(201).json({ message: 'User registered successfully' });\n  } catch (error) {\n    console.error('Error registering user:', error); // Log the error\n    res.status(500).json({ message: 'Error registering user', error: error.message });\n  }\n});\n\n// Login route\nrouter.post('/signin', async (req, res) => {\n  try {\n    const { email, password } = req.body;\n    const user = await User.findOne({ email }).select('+password');\n    if (!user) {\n      return res.status(401).json({ message: 'Invalid credentials' });\n    }\n    const isMatch = await bcrypt.compare(password, user.password);\n    if (!isMatch) {\n      return res.status(401).json({ message: 'Invalid credentials' });\n    }\n    const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET, { expiresIn: '1h' });\n    res.json({ token });\n  } catch (error) {\n    console.error('Error logging in:', error); // Log the error\n    res.status(500).json({ message: 'Error logging in', error: error.message });\n  }\n});\n\nmodule.exports = router;"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,MAAM,GAAGD,OAAO,CAAC,UAAU,CAAC;AAClC,MAAME,GAAG,GAAGF,OAAO,CAAC,cAAc,CAAC;AACnC,MAAMG,IAAI,GAAGH,OAAO,CAAC,gBAAgB,CAAC,CAAC,CAAC;AACxC,MAAMI,MAAM,GAAGL,OAAO,CAACM,MAAM,CAAC,CAAC;;AAE/B;AACAD,MAAM,CAACE,IAAI,CAAC,SAAS,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EACzC,IAAI;IACF,MAAM;MAAEC,IAAI;MAAEC,KAAK;MAAEC;IAAS,CAAC,GAAGJ,GAAG,CAACK,IAAI;IAC1C,MAAMC,cAAc,GAAG,MAAMZ,MAAM,CAACa,IAAI,CAACH,QAAQ,EAAE,EAAE,CAAC;IACtD,MAAMI,IAAI,GAAG,IAAIZ,IAAI,CAAC;MAAEM,IAAI;MAAEC,KAAK;MAAEC,QAAQ,EAAEE;IAAe,CAAC,CAAC;IAChE,MAAME,IAAI,CAACC,IAAI,CAAC,CAAC;IACjBR,GAAG,CAACS,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE;IAA+B,CAAC,CAAC;EACnE,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC,CAAC,CAAC;IACjDZ,GAAG,CAACS,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE,wBAAwB;MAAEC,KAAK,EAAEA,KAAK,CAACD;IAAQ,CAAC,CAAC;EACnF;AACF,CAAC,CAAC;;AAEF;AACAf,MAAM,CAACE,IAAI,CAAC,SAAS,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EACzC,IAAI;IACF,MAAM;MAAEE,KAAK;MAAEC;IAAS,CAAC,GAAGJ,GAAG,CAACK,IAAI;IACpC,MAAMG,IAAI,GAAG,MAAMZ,IAAI,CAACmB,OAAO,CAAC;MAAEZ;IAAM,CAAC,CAAC,CAACa,MAAM,CAAC,WAAW,CAAC;IAC9D,IAAI,CAACR,IAAI,EAAE;MACT,OAAOP,GAAG,CAACS,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE;MAAsB,CAAC,CAAC;IACjE;IACA,MAAMK,OAAO,GAAG,MAAMvB,MAAM,CAACwB,OAAO,CAACd,QAAQ,EAAEI,IAAI,CAACJ,QAAQ,CAAC;IAC7D,IAAI,CAACa,OAAO,EAAE;MACZ,OAAOhB,GAAG,CAACS,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE;MAAsB,CAAC,CAAC;IACjE;IACA,MAAMO,KAAK,GAAGxB,GAAG,CAACyB,IAAI,CAAC;MAAEC,MAAM,EAAEb,IAAI,CAACc;IAAI,CAAC,EAAEC,OAAO,CAACC,GAAG,CAACC,UAAU,EAAE;MAAEC,SAAS,EAAE;IAAK,CAAC,CAAC;IACzFzB,GAAG,CAACU,IAAI,CAAC;MAAEQ;IAAM,CAAC,CAAC;EACrB,CAAC,CAAC,OAAON,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC,CAAC,CAAC;IAC3CZ,GAAG,CAACS,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE,kBAAkB;MAAEC,KAAK,EAAEA,KAAK,CAACD;IAAQ,CAAC,CAAC;EAC7E;AACF,CAAC,CAAC;AAEFe,MAAM,CAACC,OAAO,GAAG/B,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}